// Code generated by Prisma (prisma@1.25.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  appointmentA: (where?: AppointmentAWhereInput) => Promise<boolean>;
  appointmentB: (where?: AppointmentBWhereInput) => Promise<boolean>;
  serviceA: (where?: ServiceAWhereInput) => Promise<boolean>;
  serviceB: (where?: ServiceBWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  appointmentA: (where: AppointmentAWhereUniqueInput) => AppointmentAPromise;
  appointmentAs: (args?: {
    where?: AppointmentAWhereInput;
    orderBy?: AppointmentAOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<AppointmentA>;
  appointmentAsConnection: (args?: {
    where?: AppointmentAWhereInput;
    orderBy?: AppointmentAOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AppointmentAConnectionPromise;
  appointmentB: (where: AppointmentBWhereUniqueInput) => AppointmentBPromise;
  appointmentBs: (args?: {
    where?: AppointmentBWhereInput;
    orderBy?: AppointmentBOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<AppointmentB>;
  appointmentBsConnection: (args?: {
    where?: AppointmentBWhereInput;
    orderBy?: AppointmentBOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AppointmentBConnectionPromise;
  serviceA: (where: ServiceAWhereUniqueInput) => ServiceAPromise;
  serviceAs: (args?: {
    where?: ServiceAWhereInput;
    orderBy?: ServiceAOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ServiceA>;
  serviceAsConnection: (args?: {
    where?: ServiceAWhereInput;
    orderBy?: ServiceAOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ServiceAConnectionPromise;
  serviceB: (where: ServiceBWhereUniqueInput) => ServiceBPromise;
  serviceBs: (args?: {
    where?: ServiceBWhereInput;
    orderBy?: ServiceBOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ServiceB>;
  serviceBsConnection: (args?: {
    where?: ServiceBWhereInput;
    orderBy?: ServiceBOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ServiceBConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAppointmentA: (data: AppointmentACreateInput) => AppointmentAPromise;
  updateAppointmentA: (args: {
    data: AppointmentAUpdateInput;
    where: AppointmentAWhereUniqueInput;
  }) => AppointmentAPromise;
  updateManyAppointmentAs: (args: {
    data: AppointmentAUpdateManyMutationInput;
    where?: AppointmentAWhereInput;
  }) => BatchPayloadPromise;
  upsertAppointmentA: (args: {
    where: AppointmentAWhereUniqueInput;
    create: AppointmentACreateInput;
    update: AppointmentAUpdateInput;
  }) => AppointmentAPromise;
  deleteAppointmentA: (
    where: AppointmentAWhereUniqueInput
  ) => AppointmentAPromise;
  deleteManyAppointmentAs: (
    where?: AppointmentAWhereInput
  ) => BatchPayloadPromise;
  createAppointmentB: (data: AppointmentBCreateInput) => AppointmentBPromise;
  updateAppointmentB: (args: {
    data: AppointmentBUpdateInput;
    where: AppointmentBWhereUniqueInput;
  }) => AppointmentBPromise;
  updateManyAppointmentBs: (args: {
    data: AppointmentBUpdateManyMutationInput;
    where?: AppointmentBWhereInput;
  }) => BatchPayloadPromise;
  upsertAppointmentB: (args: {
    where: AppointmentBWhereUniqueInput;
    create: AppointmentBCreateInput;
    update: AppointmentBUpdateInput;
  }) => AppointmentBPromise;
  deleteAppointmentB: (
    where: AppointmentBWhereUniqueInput
  ) => AppointmentBPromise;
  deleteManyAppointmentBs: (
    where?: AppointmentBWhereInput
  ) => BatchPayloadPromise;
  createServiceA: (data: ServiceACreateInput) => ServiceAPromise;
  updateServiceA: (args: {
    data: ServiceAUpdateInput;
    where: ServiceAWhereUniqueInput;
  }) => ServiceAPromise;
  updateManyServiceAs: (args: {
    data: ServiceAUpdateManyMutationInput;
    where?: ServiceAWhereInput;
  }) => BatchPayloadPromise;
  upsertServiceA: (args: {
    where: ServiceAWhereUniqueInput;
    create: ServiceACreateInput;
    update: ServiceAUpdateInput;
  }) => ServiceAPromise;
  deleteServiceA: (where: ServiceAWhereUniqueInput) => ServiceAPromise;
  deleteManyServiceAs: (where?: ServiceAWhereInput) => BatchPayloadPromise;
  createServiceB: (data: ServiceBCreateInput) => ServiceBPromise;
  updateServiceB: (args: {
    data: ServiceBUpdateInput;
    where: ServiceBWhereUniqueInput;
  }) => ServiceBPromise;
  updateManyServiceBs: (args: {
    data: ServiceBUpdateManyMutationInput;
    where?: ServiceBWhereInput;
  }) => BatchPayloadPromise;
  upsertServiceB: (args: {
    where: ServiceBWhereUniqueInput;
    create: ServiceBCreateInput;
    update: ServiceBUpdateInput;
  }) => ServiceBPromise;
  deleteServiceB: (where: ServiceBWhereUniqueInput) => ServiceBPromise;
  deleteManyServiceBs: (where?: ServiceBWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  appointmentA: (
    where?: AppointmentASubscriptionWhereInput
  ) => AppointmentASubscriptionPayloadSubscription;
  appointmentB: (
    where?: AppointmentBSubscriptionWhereInput
  ) => AppointmentBSubscriptionPayloadSubscription;
  serviceA: (
    where?: ServiceASubscriptionWhereInput
  ) => ServiceASubscriptionPayloadSubscription;
  serviceB: (
    where?: ServiceBSubscriptionWhereInput
  ) => ServiceBSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Gender = "MALE" | "FEMALE";

export type AppointmentType = "VERY_SHORT" | "SHORT" | "LONG";

export type AppointmentAOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "day_ASC"
  | "day_DESC"
  | "startTime_ASC"
  | "startTime_DESC"
  | "endTime_ASC"
  | "endTime_DESC"
  | "type_ASC"
  | "type_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AppointmentBOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "day_ASC"
  | "day_DESC"
  | "startTime_ASC"
  | "startTime_DESC"
  | "endTime_ASC"
  | "endTime_DESC"
  | "type_ASC"
  | "type_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ServiceAOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "fullName_ASC"
  | "fullName_DESC"
  | "Bio_ASC"
  | "Bio_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "Birthday_ASC"
  | "Birthday_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ServiceBOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "fullName_ASC"
  | "fullName_DESC"
  | "Bio_ASC"
  | "Bio_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "Birthday_ASC"
  | "Birthday_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "fullName_ASC"
  | "fullName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "age_ASC"
  | "age_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AppointmentAWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  startTime?: String;
  endTime?: String;
}>;

export interface AppointmentAWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  serviceId?: ServiceAWhereInput;
  userId?: UserWhereInput;
  day?: String;
  day_not?: String;
  day_in?: String[] | String;
  day_not_in?: String[] | String;
  day_lt?: String;
  day_lte?: String;
  day_gt?: String;
  day_gte?: String;
  day_contains?: String;
  day_not_contains?: String;
  day_starts_with?: String;
  day_not_starts_with?: String;
  day_ends_with?: String;
  day_not_ends_with?: String;
  startTime?: String;
  startTime_not?: String;
  startTime_in?: String[] | String;
  startTime_not_in?: String[] | String;
  startTime_lt?: String;
  startTime_lte?: String;
  startTime_gt?: String;
  startTime_gte?: String;
  startTime_contains?: String;
  startTime_not_contains?: String;
  startTime_starts_with?: String;
  startTime_not_starts_with?: String;
  startTime_ends_with?: String;
  startTime_not_ends_with?: String;
  endTime?: String;
  endTime_not?: String;
  endTime_in?: String[] | String;
  endTime_not_in?: String[] | String;
  endTime_lt?: String;
  endTime_lte?: String;
  endTime_gt?: String;
  endTime_gte?: String;
  endTime_contains?: String;
  endTime_not_contains?: String;
  endTime_starts_with?: String;
  endTime_not_starts_with?: String;
  endTime_ends_with?: String;
  endTime_not_ends_with?: String;
  type?: AppointmentType;
  type_not?: AppointmentType;
  type_in?: AppointmentType[] | AppointmentType;
  type_not_in?: AppointmentType[] | AppointmentType;
  AND?: AppointmentAWhereInput[] | AppointmentAWhereInput;
  OR?: AppointmentAWhereInput[] | AppointmentAWhereInput;
  NOT?: AppointmentAWhereInput[] | AppointmentAWhereInput;
}

export interface ServiceAWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  fullName?: String;
  fullName_not?: String;
  fullName_in?: String[] | String;
  fullName_not_in?: String[] | String;
  fullName_lt?: String;
  fullName_lte?: String;
  fullName_gt?: String;
  fullName_gte?: String;
  fullName_contains?: String;
  fullName_not_contains?: String;
  fullName_starts_with?: String;
  fullName_not_starts_with?: String;
  fullName_ends_with?: String;
  fullName_not_ends_with?: String;
  Bio?: String;
  Bio_not?: String;
  Bio_in?: String[] | String;
  Bio_not_in?: String[] | String;
  Bio_lt?: String;
  Bio_lte?: String;
  Bio_gt?: String;
  Bio_gte?: String;
  Bio_contains?: String;
  Bio_not_contains?: String;
  Bio_starts_with?: String;
  Bio_not_starts_with?: String;
  Bio_ends_with?: String;
  Bio_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  Birthday?: String;
  Birthday_not?: String;
  Birthday_in?: String[] | String;
  Birthday_not_in?: String[] | String;
  Birthday_lt?: String;
  Birthday_lte?: String;
  Birthday_gt?: String;
  Birthday_gte?: String;
  Birthday_contains?: String;
  Birthday_not_contains?: String;
  Birthday_starts_with?: String;
  Birthday_not_starts_with?: String;
  Birthday_ends_with?: String;
  Birthday_not_ends_with?: String;
  phone?: Int;
  phone_not?: Int;
  phone_in?: Int[] | Int;
  phone_not_in?: Int[] | Int;
  phone_lt?: Int;
  phone_lte?: Int;
  phone_gt?: Int;
  phone_gte?: Int;
  gender?: Gender;
  gender_not?: Gender;
  gender_in?: Gender[] | Gender;
  gender_not_in?: Gender[] | Gender;
  avatar?: String;
  avatar_not?: String;
  avatar_in?: String[] | String;
  avatar_not_in?: String[] | String;
  avatar_lt?: String;
  avatar_lte?: String;
  avatar_gt?: String;
  avatar_gte?: String;
  avatar_contains?: String;
  avatar_not_contains?: String;
  avatar_starts_with?: String;
  avatar_not_starts_with?: String;
  avatar_ends_with?: String;
  avatar_not_ends_with?: String;
  Appointments_every?: AppointmentAWhereInput;
  Appointments_some?: AppointmentAWhereInput;
  Appointments_none?: AppointmentAWhereInput;
  AND?: ServiceAWhereInput[] | ServiceAWhereInput;
  OR?: ServiceAWhereInput[] | ServiceAWhereInput;
  NOT?: ServiceAWhereInput[] | ServiceAWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  fullName?: String;
  fullName_not?: String;
  fullName_in?: String[] | String;
  fullName_not_in?: String[] | String;
  fullName_lt?: String;
  fullName_lte?: String;
  fullName_gt?: String;
  fullName_gte?: String;
  fullName_contains?: String;
  fullName_not_contains?: String;
  fullName_starts_with?: String;
  fullName_not_starts_with?: String;
  fullName_ends_with?: String;
  fullName_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  age?: Int;
  age_not?: Int;
  age_in?: Int[] | Int;
  age_not_in?: Int[] | Int;
  age_lt?: Int;
  age_lte?: Int;
  age_gt?: Int;
  age_gte?: Int;
  phone?: Int;
  phone_not?: Int;
  phone_in?: Int[] | Int;
  phone_not_in?: Int[] | Int;
  phone_lt?: Int;
  phone_lte?: Int;
  phone_gt?: Int;
  phone_gte?: Int;
  gender?: Gender;
  gender_not?: Gender;
  gender_in?: Gender[] | Gender;
  gender_not_in?: Gender[] | Gender;
  avatar?: String;
  avatar_not?: String;
  avatar_in?: String[] | String;
  avatar_not_in?: String[] | String;
  avatar_lt?: String;
  avatar_lte?: String;
  avatar_gt?: String;
  avatar_gte?: String;
  avatar_contains?: String;
  avatar_not_contains?: String;
  avatar_starts_with?: String;
  avatar_not_starts_with?: String;
  avatar_ends_with?: String;
  avatar_not_ends_with?: String;
  AppointmentsA_every?: AppointmentAWhereInput;
  AppointmentsA_some?: AppointmentAWhereInput;
  AppointmentsA_none?: AppointmentAWhereInput;
  AppointmentsB_every?: AppointmentBWhereInput;
  AppointmentsB_some?: AppointmentBWhereInput;
  AppointmentsB_none?: AppointmentBWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface AppointmentBWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  serviceId?: ServiceBWhereInput;
  userId?: UserWhereInput;
  day?: String;
  day_not?: String;
  day_in?: String[] | String;
  day_not_in?: String[] | String;
  day_lt?: String;
  day_lte?: String;
  day_gt?: String;
  day_gte?: String;
  day_contains?: String;
  day_not_contains?: String;
  day_starts_with?: String;
  day_not_starts_with?: String;
  day_ends_with?: String;
  day_not_ends_with?: String;
  startTime?: String;
  startTime_not?: String;
  startTime_in?: String[] | String;
  startTime_not_in?: String[] | String;
  startTime_lt?: String;
  startTime_lte?: String;
  startTime_gt?: String;
  startTime_gte?: String;
  startTime_contains?: String;
  startTime_not_contains?: String;
  startTime_starts_with?: String;
  startTime_not_starts_with?: String;
  startTime_ends_with?: String;
  startTime_not_ends_with?: String;
  endTime?: String;
  endTime_not?: String;
  endTime_in?: String[] | String;
  endTime_not_in?: String[] | String;
  endTime_lt?: String;
  endTime_lte?: String;
  endTime_gt?: String;
  endTime_gte?: String;
  endTime_contains?: String;
  endTime_not_contains?: String;
  endTime_starts_with?: String;
  endTime_not_starts_with?: String;
  endTime_ends_with?: String;
  endTime_not_ends_with?: String;
  type?: AppointmentType;
  type_not?: AppointmentType;
  type_in?: AppointmentType[] | AppointmentType;
  type_not_in?: AppointmentType[] | AppointmentType;
  AND?: AppointmentBWhereInput[] | AppointmentBWhereInput;
  OR?: AppointmentBWhereInput[] | AppointmentBWhereInput;
  NOT?: AppointmentBWhereInput[] | AppointmentBWhereInput;
}

export interface ServiceBWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  fullName?: String;
  fullName_not?: String;
  fullName_in?: String[] | String;
  fullName_not_in?: String[] | String;
  fullName_lt?: String;
  fullName_lte?: String;
  fullName_gt?: String;
  fullName_gte?: String;
  fullName_contains?: String;
  fullName_not_contains?: String;
  fullName_starts_with?: String;
  fullName_not_starts_with?: String;
  fullName_ends_with?: String;
  fullName_not_ends_with?: String;
  Bio?: String;
  Bio_not?: String;
  Bio_in?: String[] | String;
  Bio_not_in?: String[] | String;
  Bio_lt?: String;
  Bio_lte?: String;
  Bio_gt?: String;
  Bio_gte?: String;
  Bio_contains?: String;
  Bio_not_contains?: String;
  Bio_starts_with?: String;
  Bio_not_starts_with?: String;
  Bio_ends_with?: String;
  Bio_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  Birthday?: String;
  Birthday_not?: String;
  Birthday_in?: String[] | String;
  Birthday_not_in?: String[] | String;
  Birthday_lt?: String;
  Birthday_lte?: String;
  Birthday_gt?: String;
  Birthday_gte?: String;
  Birthday_contains?: String;
  Birthday_not_contains?: String;
  Birthday_starts_with?: String;
  Birthday_not_starts_with?: String;
  Birthday_ends_with?: String;
  Birthday_not_ends_with?: String;
  phone?: Int;
  phone_not?: Int;
  phone_in?: Int[] | Int;
  phone_not_in?: Int[] | Int;
  phone_lt?: Int;
  phone_lte?: Int;
  phone_gt?: Int;
  phone_gte?: Int;
  gender?: Gender;
  gender_not?: Gender;
  gender_in?: Gender[] | Gender;
  gender_not_in?: Gender[] | Gender;
  avatar?: String;
  avatar_not?: String;
  avatar_in?: String[] | String;
  avatar_not_in?: String[] | String;
  avatar_lt?: String;
  avatar_lte?: String;
  avatar_gt?: String;
  avatar_gte?: String;
  avatar_contains?: String;
  avatar_not_contains?: String;
  avatar_starts_with?: String;
  avatar_not_starts_with?: String;
  avatar_ends_with?: String;
  avatar_not_ends_with?: String;
  Appointments_every?: AppointmentBWhereInput;
  Appointments_some?: AppointmentBWhereInput;
  Appointments_none?: AppointmentBWhereInput;
  AND?: ServiceBWhereInput[] | ServiceBWhereInput;
  OR?: ServiceBWhereInput[] | ServiceBWhereInput;
  NOT?: ServiceBWhereInput[] | ServiceBWhereInput;
}

export type AppointmentBWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  startTime?: String;
  endTime?: String;
}>;

export type ServiceAWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export type ServiceBWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface AppointmentACreateInput {
  serviceId: ServiceACreateOneWithoutAppointmentsInput;
  userId: UserCreateOneWithoutAppointmentsAInput;
  day: String;
  startTime: String;
  endTime: String;
  type: AppointmentType;
}

export interface ServiceACreateOneWithoutAppointmentsInput {
  create?: ServiceACreateWithoutAppointmentsInput;
  connect?: ServiceAWhereUniqueInput;
}

export interface ServiceACreateWithoutAppointmentsInput {
  fullName: String;
  Bio?: String;
  email: String;
  password: String;
  Birthday: String;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
}

export interface UserCreateOneWithoutAppointmentsAInput {
  create?: UserCreateWithoutAppointmentsAInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutAppointmentsAInput {
  fullName: String;
  email: String;
  password: String;
  age: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  AppointmentsB?: AppointmentBCreateManyWithoutUserIdInput;
}

export interface AppointmentBCreateManyWithoutUserIdInput {
  create?:
    | AppointmentBCreateWithoutUserIdInput[]
    | AppointmentBCreateWithoutUserIdInput;
  connect?: AppointmentBWhereUniqueInput[] | AppointmentBWhereUniqueInput;
}

export interface AppointmentBCreateWithoutUserIdInput {
  serviceId: ServiceBCreateOneWithoutAppointmentsInput;
  day: String;
  startTime: String;
  endTime: String;
  type: AppointmentType;
}

export interface ServiceBCreateOneWithoutAppointmentsInput {
  create?: ServiceBCreateWithoutAppointmentsInput;
  connect?: ServiceBWhereUniqueInput;
}

export interface ServiceBCreateWithoutAppointmentsInput {
  fullName: String;
  Bio?: String;
  email: String;
  password: String;
  Birthday: String;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
}

export interface AppointmentAUpdateInput {
  serviceId?: ServiceAUpdateOneRequiredWithoutAppointmentsInput;
  userId?: UserUpdateOneRequiredWithoutAppointmentsAInput;
  day?: String;
  startTime?: String;
  endTime?: String;
  type?: AppointmentType;
}

export interface ServiceAUpdateOneRequiredWithoutAppointmentsInput {
  create?: ServiceACreateWithoutAppointmentsInput;
  update?: ServiceAUpdateWithoutAppointmentsDataInput;
  upsert?: ServiceAUpsertWithoutAppointmentsInput;
  connect?: ServiceAWhereUniqueInput;
}

export interface ServiceAUpdateWithoutAppointmentsDataInput {
  fullName?: String;
  Bio?: String;
  email?: String;
  password?: String;
  Birthday?: String;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
}

export interface ServiceAUpsertWithoutAppointmentsInput {
  update: ServiceAUpdateWithoutAppointmentsDataInput;
  create: ServiceACreateWithoutAppointmentsInput;
}

export interface UserUpdateOneRequiredWithoutAppointmentsAInput {
  create?: UserCreateWithoutAppointmentsAInput;
  update?: UserUpdateWithoutAppointmentsADataInput;
  upsert?: UserUpsertWithoutAppointmentsAInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutAppointmentsADataInput {
  fullName?: String;
  email?: String;
  password?: String;
  age?: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  AppointmentsB?: AppointmentBUpdateManyWithoutUserIdInput;
}

export interface AppointmentBUpdateManyWithoutUserIdInput {
  create?:
    | AppointmentBCreateWithoutUserIdInput[]
    | AppointmentBCreateWithoutUserIdInput;
  delete?: AppointmentBWhereUniqueInput[] | AppointmentBWhereUniqueInput;
  connect?: AppointmentBWhereUniqueInput[] | AppointmentBWhereUniqueInput;
  disconnect?: AppointmentBWhereUniqueInput[] | AppointmentBWhereUniqueInput;
  update?:
    | AppointmentBUpdateWithWhereUniqueWithoutUserIdInput[]
    | AppointmentBUpdateWithWhereUniqueWithoutUserIdInput;
  upsert?:
    | AppointmentBUpsertWithWhereUniqueWithoutUserIdInput[]
    | AppointmentBUpsertWithWhereUniqueWithoutUserIdInput;
  deleteMany?: AppointmentBScalarWhereInput[] | AppointmentBScalarWhereInput;
  updateMany?:
    | AppointmentBUpdateManyWithWhereNestedInput[]
    | AppointmentBUpdateManyWithWhereNestedInput;
}

export interface AppointmentBUpdateWithWhereUniqueWithoutUserIdInput {
  where: AppointmentBWhereUniqueInput;
  data: AppointmentBUpdateWithoutUserIdDataInput;
}

export interface AppointmentBUpdateWithoutUserIdDataInput {
  serviceId?: ServiceBUpdateOneRequiredWithoutAppointmentsInput;
  day?: String;
  startTime?: String;
  endTime?: String;
  type?: AppointmentType;
}

export interface ServiceBUpdateOneRequiredWithoutAppointmentsInput {
  create?: ServiceBCreateWithoutAppointmentsInput;
  update?: ServiceBUpdateWithoutAppointmentsDataInput;
  upsert?: ServiceBUpsertWithoutAppointmentsInput;
  connect?: ServiceBWhereUniqueInput;
}

export interface ServiceBUpdateWithoutAppointmentsDataInput {
  fullName?: String;
  Bio?: String;
  email?: String;
  password?: String;
  Birthday?: String;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
}

export interface ServiceBUpsertWithoutAppointmentsInput {
  update: ServiceBUpdateWithoutAppointmentsDataInput;
  create: ServiceBCreateWithoutAppointmentsInput;
}

export interface AppointmentBUpsertWithWhereUniqueWithoutUserIdInput {
  where: AppointmentBWhereUniqueInput;
  update: AppointmentBUpdateWithoutUserIdDataInput;
  create: AppointmentBCreateWithoutUserIdInput;
}

export interface AppointmentBScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  day?: String;
  day_not?: String;
  day_in?: String[] | String;
  day_not_in?: String[] | String;
  day_lt?: String;
  day_lte?: String;
  day_gt?: String;
  day_gte?: String;
  day_contains?: String;
  day_not_contains?: String;
  day_starts_with?: String;
  day_not_starts_with?: String;
  day_ends_with?: String;
  day_not_ends_with?: String;
  startTime?: String;
  startTime_not?: String;
  startTime_in?: String[] | String;
  startTime_not_in?: String[] | String;
  startTime_lt?: String;
  startTime_lte?: String;
  startTime_gt?: String;
  startTime_gte?: String;
  startTime_contains?: String;
  startTime_not_contains?: String;
  startTime_starts_with?: String;
  startTime_not_starts_with?: String;
  startTime_ends_with?: String;
  startTime_not_ends_with?: String;
  endTime?: String;
  endTime_not?: String;
  endTime_in?: String[] | String;
  endTime_not_in?: String[] | String;
  endTime_lt?: String;
  endTime_lte?: String;
  endTime_gt?: String;
  endTime_gte?: String;
  endTime_contains?: String;
  endTime_not_contains?: String;
  endTime_starts_with?: String;
  endTime_not_starts_with?: String;
  endTime_ends_with?: String;
  endTime_not_ends_with?: String;
  type?: AppointmentType;
  type_not?: AppointmentType;
  type_in?: AppointmentType[] | AppointmentType;
  type_not_in?: AppointmentType[] | AppointmentType;
  AND?: AppointmentBScalarWhereInput[] | AppointmentBScalarWhereInput;
  OR?: AppointmentBScalarWhereInput[] | AppointmentBScalarWhereInput;
  NOT?: AppointmentBScalarWhereInput[] | AppointmentBScalarWhereInput;
}

export interface AppointmentBUpdateManyWithWhereNestedInput {
  where: AppointmentBScalarWhereInput;
  data: AppointmentBUpdateManyDataInput;
}

export interface AppointmentBUpdateManyDataInput {
  day?: String;
  startTime?: String;
  endTime?: String;
  type?: AppointmentType;
}

export interface UserUpsertWithoutAppointmentsAInput {
  update: UserUpdateWithoutAppointmentsADataInput;
  create: UserCreateWithoutAppointmentsAInput;
}

export interface AppointmentAUpdateManyMutationInput {
  day?: String;
  startTime?: String;
  endTime?: String;
  type?: AppointmentType;
}

export interface AppointmentBCreateInput {
  serviceId: ServiceBCreateOneWithoutAppointmentsInput;
  userId: UserCreateOneWithoutAppointmentsBInput;
  day: String;
  startTime: String;
  endTime: String;
  type: AppointmentType;
}

export interface UserCreateOneWithoutAppointmentsBInput {
  create?: UserCreateWithoutAppointmentsBInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutAppointmentsBInput {
  fullName: String;
  email: String;
  password: String;
  age: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  AppointmentsA?: AppointmentACreateManyWithoutUserIdInput;
}

export interface AppointmentACreateManyWithoutUserIdInput {
  create?:
    | AppointmentACreateWithoutUserIdInput[]
    | AppointmentACreateWithoutUserIdInput;
  connect?: AppointmentAWhereUniqueInput[] | AppointmentAWhereUniqueInput;
}

export interface AppointmentACreateWithoutUserIdInput {
  serviceId: ServiceACreateOneWithoutAppointmentsInput;
  day: String;
  startTime: String;
  endTime: String;
  type: AppointmentType;
}

export interface AppointmentBUpdateInput {
  serviceId?: ServiceBUpdateOneRequiredWithoutAppointmentsInput;
  userId?: UserUpdateOneRequiredWithoutAppointmentsBInput;
  day?: String;
  startTime?: String;
  endTime?: String;
  type?: AppointmentType;
}

export interface UserUpdateOneRequiredWithoutAppointmentsBInput {
  create?: UserCreateWithoutAppointmentsBInput;
  update?: UserUpdateWithoutAppointmentsBDataInput;
  upsert?: UserUpsertWithoutAppointmentsBInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutAppointmentsBDataInput {
  fullName?: String;
  email?: String;
  password?: String;
  age?: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  AppointmentsA?: AppointmentAUpdateManyWithoutUserIdInput;
}

export interface AppointmentAUpdateManyWithoutUserIdInput {
  create?:
    | AppointmentACreateWithoutUserIdInput[]
    | AppointmentACreateWithoutUserIdInput;
  delete?: AppointmentAWhereUniqueInput[] | AppointmentAWhereUniqueInput;
  connect?: AppointmentAWhereUniqueInput[] | AppointmentAWhereUniqueInput;
  disconnect?: AppointmentAWhereUniqueInput[] | AppointmentAWhereUniqueInput;
  update?:
    | AppointmentAUpdateWithWhereUniqueWithoutUserIdInput[]
    | AppointmentAUpdateWithWhereUniqueWithoutUserIdInput;
  upsert?:
    | AppointmentAUpsertWithWhereUniqueWithoutUserIdInput[]
    | AppointmentAUpsertWithWhereUniqueWithoutUserIdInput;
  deleteMany?: AppointmentAScalarWhereInput[] | AppointmentAScalarWhereInput;
  updateMany?:
    | AppointmentAUpdateManyWithWhereNestedInput[]
    | AppointmentAUpdateManyWithWhereNestedInput;
}

export interface AppointmentAUpdateWithWhereUniqueWithoutUserIdInput {
  where: AppointmentAWhereUniqueInput;
  data: AppointmentAUpdateWithoutUserIdDataInput;
}

export interface AppointmentAUpdateWithoutUserIdDataInput {
  serviceId?: ServiceAUpdateOneRequiredWithoutAppointmentsInput;
  day?: String;
  startTime?: String;
  endTime?: String;
  type?: AppointmentType;
}

export interface AppointmentAUpsertWithWhereUniqueWithoutUserIdInput {
  where: AppointmentAWhereUniqueInput;
  update: AppointmentAUpdateWithoutUserIdDataInput;
  create: AppointmentACreateWithoutUserIdInput;
}

export interface AppointmentAScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  day?: String;
  day_not?: String;
  day_in?: String[] | String;
  day_not_in?: String[] | String;
  day_lt?: String;
  day_lte?: String;
  day_gt?: String;
  day_gte?: String;
  day_contains?: String;
  day_not_contains?: String;
  day_starts_with?: String;
  day_not_starts_with?: String;
  day_ends_with?: String;
  day_not_ends_with?: String;
  startTime?: String;
  startTime_not?: String;
  startTime_in?: String[] | String;
  startTime_not_in?: String[] | String;
  startTime_lt?: String;
  startTime_lte?: String;
  startTime_gt?: String;
  startTime_gte?: String;
  startTime_contains?: String;
  startTime_not_contains?: String;
  startTime_starts_with?: String;
  startTime_not_starts_with?: String;
  startTime_ends_with?: String;
  startTime_not_ends_with?: String;
  endTime?: String;
  endTime_not?: String;
  endTime_in?: String[] | String;
  endTime_not_in?: String[] | String;
  endTime_lt?: String;
  endTime_lte?: String;
  endTime_gt?: String;
  endTime_gte?: String;
  endTime_contains?: String;
  endTime_not_contains?: String;
  endTime_starts_with?: String;
  endTime_not_starts_with?: String;
  endTime_ends_with?: String;
  endTime_not_ends_with?: String;
  type?: AppointmentType;
  type_not?: AppointmentType;
  type_in?: AppointmentType[] | AppointmentType;
  type_not_in?: AppointmentType[] | AppointmentType;
  AND?: AppointmentAScalarWhereInput[] | AppointmentAScalarWhereInput;
  OR?: AppointmentAScalarWhereInput[] | AppointmentAScalarWhereInput;
  NOT?: AppointmentAScalarWhereInput[] | AppointmentAScalarWhereInput;
}

export interface AppointmentAUpdateManyWithWhereNestedInput {
  where: AppointmentAScalarWhereInput;
  data: AppointmentAUpdateManyDataInput;
}

export interface AppointmentAUpdateManyDataInput {
  day?: String;
  startTime?: String;
  endTime?: String;
  type?: AppointmentType;
}

export interface UserUpsertWithoutAppointmentsBInput {
  update: UserUpdateWithoutAppointmentsBDataInput;
  create: UserCreateWithoutAppointmentsBInput;
}

export interface AppointmentBUpdateManyMutationInput {
  day?: String;
  startTime?: String;
  endTime?: String;
  type?: AppointmentType;
}

export interface ServiceACreateInput {
  fullName: String;
  Bio?: String;
  email: String;
  password: String;
  Birthday: String;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  Appointments?: AppointmentACreateManyWithoutServiceIdInput;
}

export interface AppointmentACreateManyWithoutServiceIdInput {
  create?:
    | AppointmentACreateWithoutServiceIdInput[]
    | AppointmentACreateWithoutServiceIdInput;
  connect?: AppointmentAWhereUniqueInput[] | AppointmentAWhereUniqueInput;
}

export interface AppointmentACreateWithoutServiceIdInput {
  userId: UserCreateOneWithoutAppointmentsAInput;
  day: String;
  startTime: String;
  endTime: String;
  type: AppointmentType;
}

export interface ServiceAUpdateInput {
  fullName?: String;
  Bio?: String;
  email?: String;
  password?: String;
  Birthday?: String;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  Appointments?: AppointmentAUpdateManyWithoutServiceIdInput;
}

export interface AppointmentAUpdateManyWithoutServiceIdInput {
  create?:
    | AppointmentACreateWithoutServiceIdInput[]
    | AppointmentACreateWithoutServiceIdInput;
  delete?: AppointmentAWhereUniqueInput[] | AppointmentAWhereUniqueInput;
  connect?: AppointmentAWhereUniqueInput[] | AppointmentAWhereUniqueInput;
  disconnect?: AppointmentAWhereUniqueInput[] | AppointmentAWhereUniqueInput;
  update?:
    | AppointmentAUpdateWithWhereUniqueWithoutServiceIdInput[]
    | AppointmentAUpdateWithWhereUniqueWithoutServiceIdInput;
  upsert?:
    | AppointmentAUpsertWithWhereUniqueWithoutServiceIdInput[]
    | AppointmentAUpsertWithWhereUniqueWithoutServiceIdInput;
  deleteMany?: AppointmentAScalarWhereInput[] | AppointmentAScalarWhereInput;
  updateMany?:
    | AppointmentAUpdateManyWithWhereNestedInput[]
    | AppointmentAUpdateManyWithWhereNestedInput;
}

export interface AppointmentAUpdateWithWhereUniqueWithoutServiceIdInput {
  where: AppointmentAWhereUniqueInput;
  data: AppointmentAUpdateWithoutServiceIdDataInput;
}

export interface AppointmentAUpdateWithoutServiceIdDataInput {
  userId?: UserUpdateOneRequiredWithoutAppointmentsAInput;
  day?: String;
  startTime?: String;
  endTime?: String;
  type?: AppointmentType;
}

export interface AppointmentAUpsertWithWhereUniqueWithoutServiceIdInput {
  where: AppointmentAWhereUniqueInput;
  update: AppointmentAUpdateWithoutServiceIdDataInput;
  create: AppointmentACreateWithoutServiceIdInput;
}

export interface ServiceAUpdateManyMutationInput {
  fullName?: String;
  Bio?: String;
  email?: String;
  password?: String;
  Birthday?: String;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
}

export interface ServiceBCreateInput {
  fullName: String;
  Bio?: String;
  email: String;
  password: String;
  Birthday: String;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  Appointments?: AppointmentBCreateManyWithoutServiceIdInput;
}

export interface AppointmentBCreateManyWithoutServiceIdInput {
  create?:
    | AppointmentBCreateWithoutServiceIdInput[]
    | AppointmentBCreateWithoutServiceIdInput;
  connect?: AppointmentBWhereUniqueInput[] | AppointmentBWhereUniqueInput;
}

export interface AppointmentBCreateWithoutServiceIdInput {
  userId: UserCreateOneWithoutAppointmentsBInput;
  day: String;
  startTime: String;
  endTime: String;
  type: AppointmentType;
}

export interface ServiceBUpdateInput {
  fullName?: String;
  Bio?: String;
  email?: String;
  password?: String;
  Birthday?: String;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  Appointments?: AppointmentBUpdateManyWithoutServiceIdInput;
}

export interface AppointmentBUpdateManyWithoutServiceIdInput {
  create?:
    | AppointmentBCreateWithoutServiceIdInput[]
    | AppointmentBCreateWithoutServiceIdInput;
  delete?: AppointmentBWhereUniqueInput[] | AppointmentBWhereUniqueInput;
  connect?: AppointmentBWhereUniqueInput[] | AppointmentBWhereUniqueInput;
  disconnect?: AppointmentBWhereUniqueInput[] | AppointmentBWhereUniqueInput;
  update?:
    | AppointmentBUpdateWithWhereUniqueWithoutServiceIdInput[]
    | AppointmentBUpdateWithWhereUniqueWithoutServiceIdInput;
  upsert?:
    | AppointmentBUpsertWithWhereUniqueWithoutServiceIdInput[]
    | AppointmentBUpsertWithWhereUniqueWithoutServiceIdInput;
  deleteMany?: AppointmentBScalarWhereInput[] | AppointmentBScalarWhereInput;
  updateMany?:
    | AppointmentBUpdateManyWithWhereNestedInput[]
    | AppointmentBUpdateManyWithWhereNestedInput;
}

export interface AppointmentBUpdateWithWhereUniqueWithoutServiceIdInput {
  where: AppointmentBWhereUniqueInput;
  data: AppointmentBUpdateWithoutServiceIdDataInput;
}

export interface AppointmentBUpdateWithoutServiceIdDataInput {
  userId?: UserUpdateOneRequiredWithoutAppointmentsBInput;
  day?: String;
  startTime?: String;
  endTime?: String;
  type?: AppointmentType;
}

export interface AppointmentBUpsertWithWhereUniqueWithoutServiceIdInput {
  where: AppointmentBWhereUniqueInput;
  update: AppointmentBUpdateWithoutServiceIdDataInput;
  create: AppointmentBCreateWithoutServiceIdInput;
}

export interface ServiceBUpdateManyMutationInput {
  fullName?: String;
  Bio?: String;
  email?: String;
  password?: String;
  Birthday?: String;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
}

export interface UserCreateInput {
  fullName: String;
  email: String;
  password: String;
  age: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  AppointmentsA?: AppointmentACreateManyWithoutUserIdInput;
  AppointmentsB?: AppointmentBCreateManyWithoutUserIdInput;
}

export interface UserUpdateInput {
  fullName?: String;
  email?: String;
  password?: String;
  age?: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  AppointmentsA?: AppointmentAUpdateManyWithoutUserIdInput;
  AppointmentsB?: AppointmentBUpdateManyWithoutUserIdInput;
}

export interface UserUpdateManyMutationInput {
  fullName?: String;
  email?: String;
  password?: String;
  age?: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
}

export interface AppointmentASubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AppointmentAWhereInput;
  AND?:
    | AppointmentASubscriptionWhereInput[]
    | AppointmentASubscriptionWhereInput;
  OR?:
    | AppointmentASubscriptionWhereInput[]
    | AppointmentASubscriptionWhereInput;
  NOT?:
    | AppointmentASubscriptionWhereInput[]
    | AppointmentASubscriptionWhereInput;
}

export interface AppointmentBSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AppointmentBWhereInput;
  AND?:
    | AppointmentBSubscriptionWhereInput[]
    | AppointmentBSubscriptionWhereInput;
  OR?:
    | AppointmentBSubscriptionWhereInput[]
    | AppointmentBSubscriptionWhereInput;
  NOT?:
    | AppointmentBSubscriptionWhereInput[]
    | AppointmentBSubscriptionWhereInput;
}

export interface ServiceASubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ServiceAWhereInput;
  AND?: ServiceASubscriptionWhereInput[] | ServiceASubscriptionWhereInput;
  OR?: ServiceASubscriptionWhereInput[] | ServiceASubscriptionWhereInput;
  NOT?: ServiceASubscriptionWhereInput[] | ServiceASubscriptionWhereInput;
}

export interface ServiceBSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ServiceBWhereInput;
  AND?: ServiceBSubscriptionWhereInput[] | ServiceBSubscriptionWhereInput;
  OR?: ServiceBSubscriptionWhereInput[] | ServiceBSubscriptionWhereInput;
  NOT?: ServiceBSubscriptionWhereInput[] | ServiceBSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface AppointmentA {
  id: ID_Output;
  day: String;
  startTime: String;
  endTime: String;
  type: AppointmentType;
}

export interface AppointmentAPromise
  extends Promise<AppointmentA>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  serviceId: <T = ServiceAPromise>() => T;
  userId: <T = UserPromise>() => T;
  day: () => Promise<String>;
  startTime: () => Promise<String>;
  endTime: () => Promise<String>;
  type: () => Promise<AppointmentType>;
}

export interface AppointmentASubscription
  extends Promise<AsyncIterator<AppointmentA>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  serviceId: <T = ServiceASubscription>() => T;
  userId: <T = UserSubscription>() => T;
  day: () => Promise<AsyncIterator<String>>;
  startTime: () => Promise<AsyncIterator<String>>;
  endTime: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<AppointmentType>>;
}

export interface ServiceA {
  id: ID_Output;
  fullName: String;
  Bio?: String;
  email: String;
  password: String;
  Birthday: String;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
}

export interface ServiceAPromise extends Promise<ServiceA>, Fragmentable {
  id: () => Promise<ID_Output>;
  fullName: () => Promise<String>;
  Bio: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  Birthday: () => Promise<String>;
  phone: () => Promise<Int>;
  gender: () => Promise<Gender>;
  avatar: () => Promise<String>;
  Appointments: <T = FragmentableArray<AppointmentA>>(args?: {
    where?: AppointmentAWhereInput;
    orderBy?: AppointmentAOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ServiceASubscription
  extends Promise<AsyncIterator<ServiceA>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fullName: () => Promise<AsyncIterator<String>>;
  Bio: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  Birthday: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<Int>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  avatar: () => Promise<AsyncIterator<String>>;
  Appointments: <T = Promise<AsyncIterator<AppointmentASubscription>>>(args?: {
    where?: AppointmentAWhereInput;
    orderBy?: AppointmentAOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  fullName: String;
  email: String;
  password: String;
  age: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  fullName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  age: () => Promise<Int>;
  phone: () => Promise<Int>;
  gender: () => Promise<Gender>;
  avatar: () => Promise<String>;
  AppointmentsA: <T = FragmentableArray<AppointmentA>>(args?: {
    where?: AppointmentAWhereInput;
    orderBy?: AppointmentAOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  AppointmentsB: <T = FragmentableArray<AppointmentB>>(args?: {
    where?: AppointmentBWhereInput;
    orderBy?: AppointmentBOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fullName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  age: () => Promise<AsyncIterator<Int>>;
  phone: () => Promise<AsyncIterator<Int>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  avatar: () => Promise<AsyncIterator<String>>;
  AppointmentsA: <T = Promise<AsyncIterator<AppointmentASubscription>>>(args?: {
    where?: AppointmentAWhereInput;
    orderBy?: AppointmentAOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  AppointmentsB: <T = Promise<AsyncIterator<AppointmentBSubscription>>>(args?: {
    where?: AppointmentBWhereInput;
    orderBy?: AppointmentBOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AppointmentB {
  id: ID_Output;
  day: String;
  startTime: String;
  endTime: String;
  type: AppointmentType;
}

export interface AppointmentBPromise
  extends Promise<AppointmentB>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  serviceId: <T = ServiceBPromise>() => T;
  userId: <T = UserPromise>() => T;
  day: () => Promise<String>;
  startTime: () => Promise<String>;
  endTime: () => Promise<String>;
  type: () => Promise<AppointmentType>;
}

export interface AppointmentBSubscription
  extends Promise<AsyncIterator<AppointmentB>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  serviceId: <T = ServiceBSubscription>() => T;
  userId: <T = UserSubscription>() => T;
  day: () => Promise<AsyncIterator<String>>;
  startTime: () => Promise<AsyncIterator<String>>;
  endTime: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<AppointmentType>>;
}

export interface ServiceB {
  id: ID_Output;
  fullName: String;
  Bio?: String;
  email: String;
  password: String;
  Birthday: String;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
}

export interface ServiceBPromise extends Promise<ServiceB>, Fragmentable {
  id: () => Promise<ID_Output>;
  fullName: () => Promise<String>;
  Bio: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  Birthday: () => Promise<String>;
  phone: () => Promise<Int>;
  gender: () => Promise<Gender>;
  avatar: () => Promise<String>;
  Appointments: <T = FragmentableArray<AppointmentB>>(args?: {
    where?: AppointmentBWhereInput;
    orderBy?: AppointmentBOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ServiceBSubscription
  extends Promise<AsyncIterator<ServiceB>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fullName: () => Promise<AsyncIterator<String>>;
  Bio: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  Birthday: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<Int>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  avatar: () => Promise<AsyncIterator<String>>;
  Appointments: <T = Promise<AsyncIterator<AppointmentBSubscription>>>(args?: {
    where?: AppointmentBWhereInput;
    orderBy?: AppointmentBOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AppointmentAConnection {
  pageInfo: PageInfo;
  edges: AppointmentAEdge[];
}

export interface AppointmentAConnectionPromise
  extends Promise<AppointmentAConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AppointmentAEdge>>() => T;
  aggregate: <T = AggregateAppointmentAPromise>() => T;
}

export interface AppointmentAConnectionSubscription
  extends Promise<AsyncIterator<AppointmentAConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AppointmentAEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAppointmentASubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AppointmentAEdge {
  node: AppointmentA;
  cursor: String;
}

export interface AppointmentAEdgePromise
  extends Promise<AppointmentAEdge>,
    Fragmentable {
  node: <T = AppointmentAPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AppointmentAEdgeSubscription
  extends Promise<AsyncIterator<AppointmentAEdge>>,
    Fragmentable {
  node: <T = AppointmentASubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAppointmentA {
  count: Int;
}

export interface AggregateAppointmentAPromise
  extends Promise<AggregateAppointmentA>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAppointmentASubscription
  extends Promise<AsyncIterator<AggregateAppointmentA>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AppointmentBConnection {
  pageInfo: PageInfo;
  edges: AppointmentBEdge[];
}

export interface AppointmentBConnectionPromise
  extends Promise<AppointmentBConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AppointmentBEdge>>() => T;
  aggregate: <T = AggregateAppointmentBPromise>() => T;
}

export interface AppointmentBConnectionSubscription
  extends Promise<AsyncIterator<AppointmentBConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AppointmentBEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAppointmentBSubscription>() => T;
}

export interface AppointmentBEdge {
  node: AppointmentB;
  cursor: String;
}

export interface AppointmentBEdgePromise
  extends Promise<AppointmentBEdge>,
    Fragmentable {
  node: <T = AppointmentBPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AppointmentBEdgeSubscription
  extends Promise<AsyncIterator<AppointmentBEdge>>,
    Fragmentable {
  node: <T = AppointmentBSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAppointmentB {
  count: Int;
}

export interface AggregateAppointmentBPromise
  extends Promise<AggregateAppointmentB>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAppointmentBSubscription
  extends Promise<AsyncIterator<AggregateAppointmentB>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ServiceAConnection {
  pageInfo: PageInfo;
  edges: ServiceAEdge[];
}

export interface ServiceAConnectionPromise
  extends Promise<ServiceAConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ServiceAEdge>>() => T;
  aggregate: <T = AggregateServiceAPromise>() => T;
}

export interface ServiceAConnectionSubscription
  extends Promise<AsyncIterator<ServiceAConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ServiceAEdgeSubscription>>>() => T;
  aggregate: <T = AggregateServiceASubscription>() => T;
}

export interface ServiceAEdge {
  node: ServiceA;
  cursor: String;
}

export interface ServiceAEdgePromise
  extends Promise<ServiceAEdge>,
    Fragmentable {
  node: <T = ServiceAPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ServiceAEdgeSubscription
  extends Promise<AsyncIterator<ServiceAEdge>>,
    Fragmentable {
  node: <T = ServiceASubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateServiceA {
  count: Int;
}

export interface AggregateServiceAPromise
  extends Promise<AggregateServiceA>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateServiceASubscription
  extends Promise<AsyncIterator<AggregateServiceA>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ServiceBConnection {
  pageInfo: PageInfo;
  edges: ServiceBEdge[];
}

export interface ServiceBConnectionPromise
  extends Promise<ServiceBConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ServiceBEdge>>() => T;
  aggregate: <T = AggregateServiceBPromise>() => T;
}

export interface ServiceBConnectionSubscription
  extends Promise<AsyncIterator<ServiceBConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ServiceBEdgeSubscription>>>() => T;
  aggregate: <T = AggregateServiceBSubscription>() => T;
}

export interface ServiceBEdge {
  node: ServiceB;
  cursor: String;
}

export interface ServiceBEdgePromise
  extends Promise<ServiceBEdge>,
    Fragmentable {
  node: <T = ServiceBPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ServiceBEdgeSubscription
  extends Promise<AsyncIterator<ServiceBEdge>>,
    Fragmentable {
  node: <T = ServiceBSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateServiceB {
  count: Int;
}

export interface AggregateServiceBPromise
  extends Promise<AggregateServiceB>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateServiceBSubscription
  extends Promise<AsyncIterator<AggregateServiceB>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AppointmentASubscriptionPayload {
  mutation: MutationType;
  node: AppointmentA;
  updatedFields: String[];
  previousValues: AppointmentAPreviousValues;
}

export interface AppointmentASubscriptionPayloadPromise
  extends Promise<AppointmentASubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AppointmentAPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AppointmentAPreviousValuesPromise>() => T;
}

export interface AppointmentASubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AppointmentASubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AppointmentASubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AppointmentAPreviousValuesSubscription>() => T;
}

export interface AppointmentAPreviousValues {
  id: ID_Output;
  day: String;
  startTime: String;
  endTime: String;
  type: AppointmentType;
}

export interface AppointmentAPreviousValuesPromise
  extends Promise<AppointmentAPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  day: () => Promise<String>;
  startTime: () => Promise<String>;
  endTime: () => Promise<String>;
  type: () => Promise<AppointmentType>;
}

export interface AppointmentAPreviousValuesSubscription
  extends Promise<AsyncIterator<AppointmentAPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  day: () => Promise<AsyncIterator<String>>;
  startTime: () => Promise<AsyncIterator<String>>;
  endTime: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<AppointmentType>>;
}

export interface AppointmentBSubscriptionPayload {
  mutation: MutationType;
  node: AppointmentB;
  updatedFields: String[];
  previousValues: AppointmentBPreviousValues;
}

export interface AppointmentBSubscriptionPayloadPromise
  extends Promise<AppointmentBSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AppointmentBPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AppointmentBPreviousValuesPromise>() => T;
}

export interface AppointmentBSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AppointmentBSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AppointmentBSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AppointmentBPreviousValuesSubscription>() => T;
}

export interface AppointmentBPreviousValues {
  id: ID_Output;
  day: String;
  startTime: String;
  endTime: String;
  type: AppointmentType;
}

export interface AppointmentBPreviousValuesPromise
  extends Promise<AppointmentBPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  day: () => Promise<String>;
  startTime: () => Promise<String>;
  endTime: () => Promise<String>;
  type: () => Promise<AppointmentType>;
}

export interface AppointmentBPreviousValuesSubscription
  extends Promise<AsyncIterator<AppointmentBPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  day: () => Promise<AsyncIterator<String>>;
  startTime: () => Promise<AsyncIterator<String>>;
  endTime: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<AppointmentType>>;
}

export interface ServiceASubscriptionPayload {
  mutation: MutationType;
  node: ServiceA;
  updatedFields: String[];
  previousValues: ServiceAPreviousValues;
}

export interface ServiceASubscriptionPayloadPromise
  extends Promise<ServiceASubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ServiceAPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ServiceAPreviousValuesPromise>() => T;
}

export interface ServiceASubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ServiceASubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ServiceASubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ServiceAPreviousValuesSubscription>() => T;
}

export interface ServiceAPreviousValues {
  id: ID_Output;
  fullName: String;
  Bio?: String;
  email: String;
  password: String;
  Birthday: String;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
}

export interface ServiceAPreviousValuesPromise
  extends Promise<ServiceAPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fullName: () => Promise<String>;
  Bio: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  Birthday: () => Promise<String>;
  phone: () => Promise<Int>;
  gender: () => Promise<Gender>;
  avatar: () => Promise<String>;
}

export interface ServiceAPreviousValuesSubscription
  extends Promise<AsyncIterator<ServiceAPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fullName: () => Promise<AsyncIterator<String>>;
  Bio: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  Birthday: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<Int>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  avatar: () => Promise<AsyncIterator<String>>;
}

export interface ServiceBSubscriptionPayload {
  mutation: MutationType;
  node: ServiceB;
  updatedFields: String[];
  previousValues: ServiceBPreviousValues;
}

export interface ServiceBSubscriptionPayloadPromise
  extends Promise<ServiceBSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ServiceBPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ServiceBPreviousValuesPromise>() => T;
}

export interface ServiceBSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ServiceBSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ServiceBSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ServiceBPreviousValuesSubscription>() => T;
}

export interface ServiceBPreviousValues {
  id: ID_Output;
  fullName: String;
  Bio?: String;
  email: String;
  password: String;
  Birthday: String;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
}

export interface ServiceBPreviousValuesPromise
  extends Promise<ServiceBPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fullName: () => Promise<String>;
  Bio: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  Birthday: () => Promise<String>;
  phone: () => Promise<Int>;
  gender: () => Promise<Gender>;
  avatar: () => Promise<String>;
}

export interface ServiceBPreviousValuesSubscription
  extends Promise<AsyncIterator<ServiceBPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fullName: () => Promise<AsyncIterator<String>>;
  Bio: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  Birthday: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<Int>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  avatar: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  fullName: String;
  email: String;
  password: String;
  age: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fullName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  age: () => Promise<Int>;
  phone: () => Promise<Int>;
  gender: () => Promise<Gender>;
  avatar: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fullName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  age: () => Promise<AsyncIterator<Int>>;
  phone: () => Promise<AsyncIterator<Int>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  avatar: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "AppointmentA",
    embedded: false
  },
  {
    name: "AppointmentB",
    embedded: false
  },
  {
    name: "AppointmentType",
    embedded: false
  },
  {
    name: "Gender",
    embedded: false
  },
  {
    name: "ServiceA",
    embedded: false
  },
  {
    name: "ServiceB",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
