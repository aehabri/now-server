// Code generated by Prisma (prisma@1.25.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  appointment: (where?: AppointmentWhereInput) => Promise<boolean>;
  serviceA: (where?: ServiceAWhereInput) => Promise<boolean>;
  serviceB: (where?: ServiceBWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  appointment: (where: AppointmentWhereUniqueInput) => AppointmentPromise;
  appointments: (args?: {
    where?: AppointmentWhereInput;
    orderBy?: AppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Appointment>;
  appointmentsConnection: (args?: {
    where?: AppointmentWhereInput;
    orderBy?: AppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AppointmentConnectionPromise;
  serviceA: (where: ServiceAWhereUniqueInput) => ServiceAPromise;
  serviceAs: (args?: {
    where?: ServiceAWhereInput;
    orderBy?: ServiceAOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ServiceA>;
  serviceAsConnection: (args?: {
    where?: ServiceAWhereInput;
    orderBy?: ServiceAOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ServiceAConnectionPromise;
  serviceB: (where: ServiceBWhereUniqueInput) => ServiceBPromise;
  serviceBs: (args?: {
    where?: ServiceBWhereInput;
    orderBy?: ServiceBOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ServiceB>;
  serviceBsConnection: (args?: {
    where?: ServiceBWhereInput;
    orderBy?: ServiceBOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ServiceBConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAppointment: (data: AppointmentCreateInput) => AppointmentPromise;
  updateAppointment: (args: {
    data: AppointmentUpdateInput;
    where: AppointmentWhereUniqueInput;
  }) => AppointmentPromise;
  updateManyAppointments: (args: {
    data: AppointmentUpdateManyMutationInput;
    where?: AppointmentWhereInput;
  }) => BatchPayloadPromise;
  upsertAppointment: (args: {
    where: AppointmentWhereUniqueInput;
    create: AppointmentCreateInput;
    update: AppointmentUpdateInput;
  }) => AppointmentPromise;
  deleteAppointment: (where: AppointmentWhereUniqueInput) => AppointmentPromise;
  deleteManyAppointments: (
    where?: AppointmentWhereInput
  ) => BatchPayloadPromise;
  createServiceA: (data: ServiceACreateInput) => ServiceAPromise;
  updateServiceA: (args: {
    data: ServiceAUpdateInput;
    where: ServiceAWhereUniqueInput;
  }) => ServiceAPromise;
  updateManyServiceAs: (args: {
    data: ServiceAUpdateManyMutationInput;
    where?: ServiceAWhereInput;
  }) => BatchPayloadPromise;
  upsertServiceA: (args: {
    where: ServiceAWhereUniqueInput;
    create: ServiceACreateInput;
    update: ServiceAUpdateInput;
  }) => ServiceAPromise;
  deleteServiceA: (where: ServiceAWhereUniqueInput) => ServiceAPromise;
  deleteManyServiceAs: (where?: ServiceAWhereInput) => BatchPayloadPromise;
  createServiceB: (data: ServiceBCreateInput) => ServiceBPromise;
  updateServiceB: (args: {
    data: ServiceBUpdateInput;
    where: ServiceBWhereUniqueInput;
  }) => ServiceBPromise;
  updateManyServiceBs: (args: {
    data: ServiceBUpdateManyMutationInput;
    where?: ServiceBWhereInput;
  }) => BatchPayloadPromise;
  upsertServiceB: (args: {
    where: ServiceBWhereUniqueInput;
    create: ServiceBCreateInput;
    update: ServiceBUpdateInput;
  }) => ServiceBPromise;
  deleteServiceB: (where: ServiceBWhereUniqueInput) => ServiceBPromise;
  deleteManyServiceBs: (where?: ServiceBWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  appointment: (
    where?: AppointmentSubscriptionWhereInput
  ) => AppointmentSubscriptionPayloadSubscription;
  serviceA: (
    where?: ServiceASubscriptionWhereInput
  ) => ServiceASubscriptionPayloadSubscription;
  serviceB: (
    where?: ServiceBSubscriptionWhereInput
  ) => ServiceBSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Service = "ServiceA" | "ServiceB";

export type Gender = "MALE" | "FEMALE";

export type AppointmentType = "VERY_SHORT" | "SHORT" | "LONG";

export type AppointmentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "serviceId_ASC"
  | "serviceId_DESC"
  | "day_ASC"
  | "day_DESC"
  | "startTime_ASC"
  | "startTime_DESC"
  | "endTime_ASC"
  | "endTime_DESC"
  | "type_ASC"
  | "type_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ServiceAOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "fullName_ASC"
  | "fullName_DESC"
  | "Bio_ASC"
  | "Bio_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "Birthday_ASC"
  | "Birthday_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "serviceA_ASC"
  | "serviceA_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ServiceBOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "fullName_ASC"
  | "fullName_DESC"
  | "Bio_ASC"
  | "Bio_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "Birthday_ASC"
  | "Birthday_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "serviceB_ASC"
  | "serviceB_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "fullName_ASC"
  | "fullName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "age_ASC"
  | "age_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AppointmentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  startTime?: String;
  endTime?: String;
}>;

export interface AppointmentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  serviceId?: Service;
  serviceId_not?: Service;
  serviceId_in?: Service[] | Service;
  serviceId_not_in?: Service[] | Service;
  userId?: UserWhereInput;
  day?: String;
  day_not?: String;
  day_in?: String[] | String;
  day_not_in?: String[] | String;
  day_lt?: String;
  day_lte?: String;
  day_gt?: String;
  day_gte?: String;
  day_contains?: String;
  day_not_contains?: String;
  day_starts_with?: String;
  day_not_starts_with?: String;
  day_ends_with?: String;
  day_not_ends_with?: String;
  startTime?: String;
  startTime_not?: String;
  startTime_in?: String[] | String;
  startTime_not_in?: String[] | String;
  startTime_lt?: String;
  startTime_lte?: String;
  startTime_gt?: String;
  startTime_gte?: String;
  startTime_contains?: String;
  startTime_not_contains?: String;
  startTime_starts_with?: String;
  startTime_not_starts_with?: String;
  startTime_ends_with?: String;
  startTime_not_ends_with?: String;
  endTime?: String;
  endTime_not?: String;
  endTime_in?: String[] | String;
  endTime_not_in?: String[] | String;
  endTime_lt?: String;
  endTime_lte?: String;
  endTime_gt?: String;
  endTime_gte?: String;
  endTime_contains?: String;
  endTime_not_contains?: String;
  endTime_starts_with?: String;
  endTime_not_starts_with?: String;
  endTime_ends_with?: String;
  endTime_not_ends_with?: String;
  type?: AppointmentType;
  type_not?: AppointmentType;
  type_in?: AppointmentType[] | AppointmentType;
  type_not_in?: AppointmentType[] | AppointmentType;
  AND?: AppointmentWhereInput[] | AppointmentWhereInput;
  OR?: AppointmentWhereInput[] | AppointmentWhereInput;
  NOT?: AppointmentWhereInput[] | AppointmentWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  fullName?: String;
  fullName_not?: String;
  fullName_in?: String[] | String;
  fullName_not_in?: String[] | String;
  fullName_lt?: String;
  fullName_lte?: String;
  fullName_gt?: String;
  fullName_gte?: String;
  fullName_contains?: String;
  fullName_not_contains?: String;
  fullName_starts_with?: String;
  fullName_not_starts_with?: String;
  fullName_ends_with?: String;
  fullName_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  age?: Int;
  age_not?: Int;
  age_in?: Int[] | Int;
  age_not_in?: Int[] | Int;
  age_lt?: Int;
  age_lte?: Int;
  age_gt?: Int;
  age_gte?: Int;
  phone?: Int;
  phone_not?: Int;
  phone_in?: Int[] | Int;
  phone_not_in?: Int[] | Int;
  phone_lt?: Int;
  phone_lte?: Int;
  phone_gt?: Int;
  phone_gte?: Int;
  gender?: Gender;
  gender_not?: Gender;
  gender_in?: Gender[] | Gender;
  gender_not_in?: Gender[] | Gender;
  avatar?: String;
  avatar_not?: String;
  avatar_in?: String[] | String;
  avatar_not_in?: String[] | String;
  avatar_lt?: String;
  avatar_lte?: String;
  avatar_gt?: String;
  avatar_gte?: String;
  avatar_contains?: String;
  avatar_not_contains?: String;
  avatar_starts_with?: String;
  avatar_not_starts_with?: String;
  avatar_ends_with?: String;
  avatar_not_ends_with?: String;
  Appointments_every?: AppointmentWhereInput;
  Appointments_some?: AppointmentWhereInput;
  Appointments_none?: AppointmentWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export type ServiceAWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface ServiceAWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  fullName?: String;
  fullName_not?: String;
  fullName_in?: String[] | String;
  fullName_not_in?: String[] | String;
  fullName_lt?: String;
  fullName_lte?: String;
  fullName_gt?: String;
  fullName_gte?: String;
  fullName_contains?: String;
  fullName_not_contains?: String;
  fullName_starts_with?: String;
  fullName_not_starts_with?: String;
  fullName_ends_with?: String;
  fullName_not_ends_with?: String;
  Bio?: String;
  Bio_not?: String;
  Bio_in?: String[] | String;
  Bio_not_in?: String[] | String;
  Bio_lt?: String;
  Bio_lte?: String;
  Bio_gt?: String;
  Bio_gte?: String;
  Bio_contains?: String;
  Bio_not_contains?: String;
  Bio_starts_with?: String;
  Bio_not_starts_with?: String;
  Bio_ends_with?: String;
  Bio_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  Birthday?: String;
  Birthday_not?: String;
  Birthday_in?: String[] | String;
  Birthday_not_in?: String[] | String;
  Birthday_lt?: String;
  Birthday_lte?: String;
  Birthday_gt?: String;
  Birthday_gte?: String;
  Birthday_contains?: String;
  Birthday_not_contains?: String;
  Birthday_starts_with?: String;
  Birthday_not_starts_with?: String;
  Birthday_ends_with?: String;
  Birthday_not_ends_with?: String;
  phone?: Int;
  phone_not?: Int;
  phone_in?: Int[] | Int;
  phone_not_in?: Int[] | Int;
  phone_lt?: Int;
  phone_lte?: Int;
  phone_gt?: Int;
  phone_gte?: Int;
  gender?: Gender;
  gender_not?: Gender;
  gender_in?: Gender[] | Gender;
  gender_not_in?: Gender[] | Gender;
  avatar?: String;
  avatar_not?: String;
  avatar_in?: String[] | String;
  avatar_not_in?: String[] | String;
  avatar_lt?: String;
  avatar_lte?: String;
  avatar_gt?: String;
  avatar_gte?: String;
  avatar_contains?: String;
  avatar_not_contains?: String;
  avatar_starts_with?: String;
  avatar_not_starts_with?: String;
  avatar_ends_with?: String;
  avatar_not_ends_with?: String;
  Appointments_every?: AppointmentWhereInput;
  Appointments_some?: AppointmentWhereInput;
  Appointments_none?: AppointmentWhereInput;
  serviceA?: String;
  serviceA_not?: String;
  serviceA_in?: String[] | String;
  serviceA_not_in?: String[] | String;
  serviceA_lt?: String;
  serviceA_lte?: String;
  serviceA_gt?: String;
  serviceA_gte?: String;
  serviceA_contains?: String;
  serviceA_not_contains?: String;
  serviceA_starts_with?: String;
  serviceA_not_starts_with?: String;
  serviceA_ends_with?: String;
  serviceA_not_ends_with?: String;
  AND?: ServiceAWhereInput[] | ServiceAWhereInput;
  OR?: ServiceAWhereInput[] | ServiceAWhereInput;
  NOT?: ServiceAWhereInput[] | ServiceAWhereInput;
}

export type ServiceBWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface ServiceBWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  fullName?: String;
  fullName_not?: String;
  fullName_in?: String[] | String;
  fullName_not_in?: String[] | String;
  fullName_lt?: String;
  fullName_lte?: String;
  fullName_gt?: String;
  fullName_gte?: String;
  fullName_contains?: String;
  fullName_not_contains?: String;
  fullName_starts_with?: String;
  fullName_not_starts_with?: String;
  fullName_ends_with?: String;
  fullName_not_ends_with?: String;
  Bio?: String;
  Bio_not?: String;
  Bio_in?: String[] | String;
  Bio_not_in?: String[] | String;
  Bio_lt?: String;
  Bio_lte?: String;
  Bio_gt?: String;
  Bio_gte?: String;
  Bio_contains?: String;
  Bio_not_contains?: String;
  Bio_starts_with?: String;
  Bio_not_starts_with?: String;
  Bio_ends_with?: String;
  Bio_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  Birthday?: String;
  Birthday_not?: String;
  Birthday_in?: String[] | String;
  Birthday_not_in?: String[] | String;
  Birthday_lt?: String;
  Birthday_lte?: String;
  Birthday_gt?: String;
  Birthday_gte?: String;
  Birthday_contains?: String;
  Birthday_not_contains?: String;
  Birthday_starts_with?: String;
  Birthday_not_starts_with?: String;
  Birthday_ends_with?: String;
  Birthday_not_ends_with?: String;
  phone?: Int;
  phone_not?: Int;
  phone_in?: Int[] | Int;
  phone_not_in?: Int[] | Int;
  phone_lt?: Int;
  phone_lte?: Int;
  phone_gt?: Int;
  phone_gte?: Int;
  gender?: Gender;
  gender_not?: Gender;
  gender_in?: Gender[] | Gender;
  gender_not_in?: Gender[] | Gender;
  avatar?: String;
  avatar_not?: String;
  avatar_in?: String[] | String;
  avatar_not_in?: String[] | String;
  avatar_lt?: String;
  avatar_lte?: String;
  avatar_gt?: String;
  avatar_gte?: String;
  avatar_contains?: String;
  avatar_not_contains?: String;
  avatar_starts_with?: String;
  avatar_not_starts_with?: String;
  avatar_ends_with?: String;
  avatar_not_ends_with?: String;
  Appointments_every?: AppointmentWhereInput;
  Appointments_some?: AppointmentWhereInput;
  Appointments_none?: AppointmentWhereInput;
  serviceB?: String;
  serviceB_not?: String;
  serviceB_in?: String[] | String;
  serviceB_not_in?: String[] | String;
  serviceB_lt?: String;
  serviceB_lte?: String;
  serviceB_gt?: String;
  serviceB_gte?: String;
  serviceB_contains?: String;
  serviceB_not_contains?: String;
  serviceB_starts_with?: String;
  serviceB_not_starts_with?: String;
  serviceB_ends_with?: String;
  serviceB_not_ends_with?: String;
  AND?: ServiceBWhereInput[] | ServiceBWhereInput;
  OR?: ServiceBWhereInput[] | ServiceBWhereInput;
  NOT?: ServiceBWhereInput[] | ServiceBWhereInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface AppointmentCreateInput {
  serviceId: Service;
  userId: UserCreateOneWithoutAppointmentsInput;
  day: String;
  startTime: String;
  endTime: String;
  type: AppointmentType;
}

export interface UserCreateOneWithoutAppointmentsInput {
  create?: UserCreateWithoutAppointmentsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutAppointmentsInput {
  fullName: String;
  email: String;
  password: String;
  age: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
}

export interface AppointmentUpdateInput {
  serviceId?: Service;
  userId?: UserUpdateOneRequiredWithoutAppointmentsInput;
  day?: String;
  startTime?: String;
  endTime?: String;
  type?: AppointmentType;
}

export interface UserUpdateOneRequiredWithoutAppointmentsInput {
  create?: UserCreateWithoutAppointmentsInput;
  update?: UserUpdateWithoutAppointmentsDataInput;
  upsert?: UserUpsertWithoutAppointmentsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutAppointmentsDataInput {
  fullName?: String;
  email?: String;
  password?: String;
  age?: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
}

export interface UserUpsertWithoutAppointmentsInput {
  update: UserUpdateWithoutAppointmentsDataInput;
  create: UserCreateWithoutAppointmentsInput;
}

export interface AppointmentUpdateManyMutationInput {
  serviceId?: Service;
  day?: String;
  startTime?: String;
  endTime?: String;
  type?: AppointmentType;
}

export interface ServiceACreateInput {
  fullName: String;
  Bio?: String;
  email: String;
  password: String;
  Birthday: String;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  Appointments?: AppointmentCreateManyInput;
  serviceA: String;
}

export interface AppointmentCreateManyInput {
  create?: AppointmentCreateInput[] | AppointmentCreateInput;
  connect?: AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput;
}

export interface ServiceAUpdateInput {
  fullName?: String;
  Bio?: String;
  email?: String;
  password?: String;
  Birthday?: String;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  Appointments?: AppointmentUpdateManyInput;
  serviceA?: String;
}

export interface AppointmentUpdateManyInput {
  create?: AppointmentCreateInput[] | AppointmentCreateInput;
  update?:
    | AppointmentUpdateWithWhereUniqueNestedInput[]
    | AppointmentUpdateWithWhereUniqueNestedInput;
  upsert?:
    | AppointmentUpsertWithWhereUniqueNestedInput[]
    | AppointmentUpsertWithWhereUniqueNestedInput;
  delete?: AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput;
  connect?: AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput;
  disconnect?: AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput;
  deleteMany?: AppointmentScalarWhereInput[] | AppointmentScalarWhereInput;
  updateMany?:
    | AppointmentUpdateManyWithWhereNestedInput[]
    | AppointmentUpdateManyWithWhereNestedInput;
}

export interface AppointmentUpdateWithWhereUniqueNestedInput {
  where: AppointmentWhereUniqueInput;
  data: AppointmentUpdateDataInput;
}

export interface AppointmentUpdateDataInput {
  serviceId?: Service;
  userId?: UserUpdateOneRequiredWithoutAppointmentsInput;
  day?: String;
  startTime?: String;
  endTime?: String;
  type?: AppointmentType;
}

export interface AppointmentUpsertWithWhereUniqueNestedInput {
  where: AppointmentWhereUniqueInput;
  update: AppointmentUpdateDataInput;
  create: AppointmentCreateInput;
}

export interface AppointmentScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  serviceId?: Service;
  serviceId_not?: Service;
  serviceId_in?: Service[] | Service;
  serviceId_not_in?: Service[] | Service;
  day?: String;
  day_not?: String;
  day_in?: String[] | String;
  day_not_in?: String[] | String;
  day_lt?: String;
  day_lte?: String;
  day_gt?: String;
  day_gte?: String;
  day_contains?: String;
  day_not_contains?: String;
  day_starts_with?: String;
  day_not_starts_with?: String;
  day_ends_with?: String;
  day_not_ends_with?: String;
  startTime?: String;
  startTime_not?: String;
  startTime_in?: String[] | String;
  startTime_not_in?: String[] | String;
  startTime_lt?: String;
  startTime_lte?: String;
  startTime_gt?: String;
  startTime_gte?: String;
  startTime_contains?: String;
  startTime_not_contains?: String;
  startTime_starts_with?: String;
  startTime_not_starts_with?: String;
  startTime_ends_with?: String;
  startTime_not_ends_with?: String;
  endTime?: String;
  endTime_not?: String;
  endTime_in?: String[] | String;
  endTime_not_in?: String[] | String;
  endTime_lt?: String;
  endTime_lte?: String;
  endTime_gt?: String;
  endTime_gte?: String;
  endTime_contains?: String;
  endTime_not_contains?: String;
  endTime_starts_with?: String;
  endTime_not_starts_with?: String;
  endTime_ends_with?: String;
  endTime_not_ends_with?: String;
  type?: AppointmentType;
  type_not?: AppointmentType;
  type_in?: AppointmentType[] | AppointmentType;
  type_not_in?: AppointmentType[] | AppointmentType;
  AND?: AppointmentScalarWhereInput[] | AppointmentScalarWhereInput;
  OR?: AppointmentScalarWhereInput[] | AppointmentScalarWhereInput;
  NOT?: AppointmentScalarWhereInput[] | AppointmentScalarWhereInput;
}

export interface AppointmentUpdateManyWithWhereNestedInput {
  where: AppointmentScalarWhereInput;
  data: AppointmentUpdateManyDataInput;
}

export interface AppointmentUpdateManyDataInput {
  serviceId?: Service;
  day?: String;
  startTime?: String;
  endTime?: String;
  type?: AppointmentType;
}

export interface ServiceAUpdateManyMutationInput {
  fullName?: String;
  Bio?: String;
  email?: String;
  password?: String;
  Birthday?: String;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  serviceA?: String;
}

export interface ServiceBCreateInput {
  fullName: String;
  Bio?: String;
  email: String;
  password: String;
  Birthday: String;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  Appointments?: AppointmentCreateManyInput;
  serviceB: String;
}

export interface ServiceBUpdateInput {
  fullName?: String;
  Bio?: String;
  email?: String;
  password?: String;
  Birthday?: String;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  Appointments?: AppointmentUpdateManyInput;
  serviceB?: String;
}

export interface ServiceBUpdateManyMutationInput {
  fullName?: String;
  Bio?: String;
  email?: String;
  password?: String;
  Birthday?: String;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  serviceB?: String;
}

export interface UserCreateInput {
  fullName: String;
  email: String;
  password: String;
  age: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  Appointments?: AppointmentCreateManyWithoutUserIdInput;
}

export interface AppointmentCreateManyWithoutUserIdInput {
  create?:
    | AppointmentCreateWithoutUserIdInput[]
    | AppointmentCreateWithoutUserIdInput;
  connect?: AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput;
}

export interface AppointmentCreateWithoutUserIdInput {
  serviceId: Service;
  day: String;
  startTime: String;
  endTime: String;
  type: AppointmentType;
}

export interface UserUpdateInput {
  fullName?: String;
  email?: String;
  password?: String;
  age?: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  Appointments?: AppointmentUpdateManyWithoutUserIdInput;
}

export interface AppointmentUpdateManyWithoutUserIdInput {
  create?:
    | AppointmentCreateWithoutUserIdInput[]
    | AppointmentCreateWithoutUserIdInput;
  delete?: AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput;
  connect?: AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput;
  disconnect?: AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput;
  update?:
    | AppointmentUpdateWithWhereUniqueWithoutUserIdInput[]
    | AppointmentUpdateWithWhereUniqueWithoutUserIdInput;
  upsert?:
    | AppointmentUpsertWithWhereUniqueWithoutUserIdInput[]
    | AppointmentUpsertWithWhereUniqueWithoutUserIdInput;
  deleteMany?: AppointmentScalarWhereInput[] | AppointmentScalarWhereInput;
  updateMany?:
    | AppointmentUpdateManyWithWhereNestedInput[]
    | AppointmentUpdateManyWithWhereNestedInput;
}

export interface AppointmentUpdateWithWhereUniqueWithoutUserIdInput {
  where: AppointmentWhereUniqueInput;
  data: AppointmentUpdateWithoutUserIdDataInput;
}

export interface AppointmentUpdateWithoutUserIdDataInput {
  serviceId?: Service;
  day?: String;
  startTime?: String;
  endTime?: String;
  type?: AppointmentType;
}

export interface AppointmentUpsertWithWhereUniqueWithoutUserIdInput {
  where: AppointmentWhereUniqueInput;
  update: AppointmentUpdateWithoutUserIdDataInput;
  create: AppointmentCreateWithoutUserIdInput;
}

export interface UserUpdateManyMutationInput {
  fullName?: String;
  email?: String;
  password?: String;
  age?: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
}

export interface AppointmentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AppointmentWhereInput;
  AND?: AppointmentSubscriptionWhereInput[] | AppointmentSubscriptionWhereInput;
  OR?: AppointmentSubscriptionWhereInput[] | AppointmentSubscriptionWhereInput;
  NOT?: AppointmentSubscriptionWhereInput[] | AppointmentSubscriptionWhereInput;
}

export interface ServiceASubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ServiceAWhereInput;
  AND?: ServiceASubscriptionWhereInput[] | ServiceASubscriptionWhereInput;
  OR?: ServiceASubscriptionWhereInput[] | ServiceASubscriptionWhereInput;
  NOT?: ServiceASubscriptionWhereInput[] | ServiceASubscriptionWhereInput;
}

export interface ServiceBSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ServiceBWhereInput;
  AND?: ServiceBSubscriptionWhereInput[] | ServiceBSubscriptionWhereInput;
  OR?: ServiceBSubscriptionWhereInput[] | ServiceBSubscriptionWhereInput;
  NOT?: ServiceBSubscriptionWhereInput[] | ServiceBSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Appointment {
  id: ID_Output;
  serviceId: Service;
  day: String;
  startTime: String;
  endTime: String;
  type: AppointmentType;
}

export interface AppointmentPromise extends Promise<Appointment>, Fragmentable {
  id: () => Promise<ID_Output>;
  serviceId: () => Promise<Service>;
  userId: <T = UserPromise>() => T;
  day: () => Promise<String>;
  startTime: () => Promise<String>;
  endTime: () => Promise<String>;
  type: () => Promise<AppointmentType>;
}

export interface AppointmentSubscription
  extends Promise<AsyncIterator<Appointment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  serviceId: () => Promise<AsyncIterator<Service>>;
  userId: <T = UserSubscription>() => T;
  day: () => Promise<AsyncIterator<String>>;
  startTime: () => Promise<AsyncIterator<String>>;
  endTime: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<AppointmentType>>;
}

export interface User {
  id: ID_Output;
  fullName: String;
  email: String;
  password: String;
  age: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  fullName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  age: () => Promise<Int>;
  phone: () => Promise<Int>;
  gender: () => Promise<Gender>;
  avatar: () => Promise<String>;
  Appointments: <T = FragmentableArray<Appointment>>(args?: {
    where?: AppointmentWhereInput;
    orderBy?: AppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fullName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  age: () => Promise<AsyncIterator<Int>>;
  phone: () => Promise<AsyncIterator<Int>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  avatar: () => Promise<AsyncIterator<String>>;
  Appointments: <T = Promise<AsyncIterator<AppointmentSubscription>>>(args?: {
    where?: AppointmentWhereInput;
    orderBy?: AppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AppointmentConnection {
  pageInfo: PageInfo;
  edges: AppointmentEdge[];
}

export interface AppointmentConnectionPromise
  extends Promise<AppointmentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AppointmentEdge>>() => T;
  aggregate: <T = AggregateAppointmentPromise>() => T;
}

export interface AppointmentConnectionSubscription
  extends Promise<AsyncIterator<AppointmentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AppointmentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAppointmentSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AppointmentEdge {
  node: Appointment;
  cursor: String;
}

export interface AppointmentEdgePromise
  extends Promise<AppointmentEdge>,
    Fragmentable {
  node: <T = AppointmentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AppointmentEdgeSubscription
  extends Promise<AsyncIterator<AppointmentEdge>>,
    Fragmentable {
  node: <T = AppointmentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAppointment {
  count: Int;
}

export interface AggregateAppointmentPromise
  extends Promise<AggregateAppointment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAppointmentSubscription
  extends Promise<AsyncIterator<AggregateAppointment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ServiceA {
  id: ID_Output;
  fullName: String;
  Bio?: String;
  email: String;
  password: String;
  Birthday: String;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  serviceA: String;
}

export interface ServiceAPromise extends Promise<ServiceA>, Fragmentable {
  id: () => Promise<ID_Output>;
  fullName: () => Promise<String>;
  Bio: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  Birthday: () => Promise<String>;
  phone: () => Promise<Int>;
  gender: () => Promise<Gender>;
  avatar: () => Promise<String>;
  Appointments: <T = FragmentableArray<Appointment>>(args?: {
    where?: AppointmentWhereInput;
    orderBy?: AppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  serviceA: () => Promise<String>;
}

export interface ServiceASubscription
  extends Promise<AsyncIterator<ServiceA>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fullName: () => Promise<AsyncIterator<String>>;
  Bio: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  Birthday: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<Int>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  avatar: () => Promise<AsyncIterator<String>>;
  Appointments: <T = Promise<AsyncIterator<AppointmentSubscription>>>(args?: {
    where?: AppointmentWhereInput;
    orderBy?: AppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  serviceA: () => Promise<AsyncIterator<String>>;
}

export interface ServiceAConnection {
  pageInfo: PageInfo;
  edges: ServiceAEdge[];
}

export interface ServiceAConnectionPromise
  extends Promise<ServiceAConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ServiceAEdge>>() => T;
  aggregate: <T = AggregateServiceAPromise>() => T;
}

export interface ServiceAConnectionSubscription
  extends Promise<AsyncIterator<ServiceAConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ServiceAEdgeSubscription>>>() => T;
  aggregate: <T = AggregateServiceASubscription>() => T;
}

export interface ServiceAEdge {
  node: ServiceA;
  cursor: String;
}

export interface ServiceAEdgePromise
  extends Promise<ServiceAEdge>,
    Fragmentable {
  node: <T = ServiceAPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ServiceAEdgeSubscription
  extends Promise<AsyncIterator<ServiceAEdge>>,
    Fragmentable {
  node: <T = ServiceASubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateServiceA {
  count: Int;
}

export interface AggregateServiceAPromise
  extends Promise<AggregateServiceA>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateServiceASubscription
  extends Promise<AsyncIterator<AggregateServiceA>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ServiceB {
  id: ID_Output;
  fullName: String;
  Bio?: String;
  email: String;
  password: String;
  Birthday: String;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  serviceB: String;
}

export interface ServiceBPromise extends Promise<ServiceB>, Fragmentable {
  id: () => Promise<ID_Output>;
  fullName: () => Promise<String>;
  Bio: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  Birthday: () => Promise<String>;
  phone: () => Promise<Int>;
  gender: () => Promise<Gender>;
  avatar: () => Promise<String>;
  Appointments: <T = FragmentableArray<Appointment>>(args?: {
    where?: AppointmentWhereInput;
    orderBy?: AppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  serviceB: () => Promise<String>;
}

export interface ServiceBSubscription
  extends Promise<AsyncIterator<ServiceB>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fullName: () => Promise<AsyncIterator<String>>;
  Bio: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  Birthday: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<Int>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  avatar: () => Promise<AsyncIterator<String>>;
  Appointments: <T = Promise<AsyncIterator<AppointmentSubscription>>>(args?: {
    where?: AppointmentWhereInput;
    orderBy?: AppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  serviceB: () => Promise<AsyncIterator<String>>;
}

export interface ServiceBConnection {
  pageInfo: PageInfo;
  edges: ServiceBEdge[];
}

export interface ServiceBConnectionPromise
  extends Promise<ServiceBConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ServiceBEdge>>() => T;
  aggregate: <T = AggregateServiceBPromise>() => T;
}

export interface ServiceBConnectionSubscription
  extends Promise<AsyncIterator<ServiceBConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ServiceBEdgeSubscription>>>() => T;
  aggregate: <T = AggregateServiceBSubscription>() => T;
}

export interface ServiceBEdge {
  node: ServiceB;
  cursor: String;
}

export interface ServiceBEdgePromise
  extends Promise<ServiceBEdge>,
    Fragmentable {
  node: <T = ServiceBPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ServiceBEdgeSubscription
  extends Promise<AsyncIterator<ServiceBEdge>>,
    Fragmentable {
  node: <T = ServiceBSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateServiceB {
  count: Int;
}

export interface AggregateServiceBPromise
  extends Promise<AggregateServiceB>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateServiceBSubscription
  extends Promise<AsyncIterator<AggregateServiceB>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AppointmentSubscriptionPayload {
  mutation: MutationType;
  node: Appointment;
  updatedFields: String[];
  previousValues: AppointmentPreviousValues;
}

export interface AppointmentSubscriptionPayloadPromise
  extends Promise<AppointmentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AppointmentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AppointmentPreviousValuesPromise>() => T;
}

export interface AppointmentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AppointmentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AppointmentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AppointmentPreviousValuesSubscription>() => T;
}

export interface AppointmentPreviousValues {
  id: ID_Output;
  serviceId: Service;
  day: String;
  startTime: String;
  endTime: String;
  type: AppointmentType;
}

export interface AppointmentPreviousValuesPromise
  extends Promise<AppointmentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  serviceId: () => Promise<Service>;
  day: () => Promise<String>;
  startTime: () => Promise<String>;
  endTime: () => Promise<String>;
  type: () => Promise<AppointmentType>;
}

export interface AppointmentPreviousValuesSubscription
  extends Promise<AsyncIterator<AppointmentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  serviceId: () => Promise<AsyncIterator<Service>>;
  day: () => Promise<AsyncIterator<String>>;
  startTime: () => Promise<AsyncIterator<String>>;
  endTime: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<AppointmentType>>;
}

export interface ServiceASubscriptionPayload {
  mutation: MutationType;
  node: ServiceA;
  updatedFields: String[];
  previousValues: ServiceAPreviousValues;
}

export interface ServiceASubscriptionPayloadPromise
  extends Promise<ServiceASubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ServiceAPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ServiceAPreviousValuesPromise>() => T;
}

export interface ServiceASubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ServiceASubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ServiceASubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ServiceAPreviousValuesSubscription>() => T;
}

export interface ServiceAPreviousValues {
  id: ID_Output;
  fullName: String;
  Bio?: String;
  email: String;
  password: String;
  Birthday: String;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  serviceA: String;
}

export interface ServiceAPreviousValuesPromise
  extends Promise<ServiceAPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fullName: () => Promise<String>;
  Bio: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  Birthday: () => Promise<String>;
  phone: () => Promise<Int>;
  gender: () => Promise<Gender>;
  avatar: () => Promise<String>;
  serviceA: () => Promise<String>;
}

export interface ServiceAPreviousValuesSubscription
  extends Promise<AsyncIterator<ServiceAPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fullName: () => Promise<AsyncIterator<String>>;
  Bio: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  Birthday: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<Int>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  avatar: () => Promise<AsyncIterator<String>>;
  serviceA: () => Promise<AsyncIterator<String>>;
}

export interface ServiceBSubscriptionPayload {
  mutation: MutationType;
  node: ServiceB;
  updatedFields: String[];
  previousValues: ServiceBPreviousValues;
}

export interface ServiceBSubscriptionPayloadPromise
  extends Promise<ServiceBSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ServiceBPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ServiceBPreviousValuesPromise>() => T;
}

export interface ServiceBSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ServiceBSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ServiceBSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ServiceBPreviousValuesSubscription>() => T;
}

export interface ServiceBPreviousValues {
  id: ID_Output;
  fullName: String;
  Bio?: String;
  email: String;
  password: String;
  Birthday: String;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  serviceB: String;
}

export interface ServiceBPreviousValuesPromise
  extends Promise<ServiceBPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fullName: () => Promise<String>;
  Bio: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  Birthday: () => Promise<String>;
  phone: () => Promise<Int>;
  gender: () => Promise<Gender>;
  avatar: () => Promise<String>;
  serviceB: () => Promise<String>;
}

export interface ServiceBPreviousValuesSubscription
  extends Promise<AsyncIterator<ServiceBPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fullName: () => Promise<AsyncIterator<String>>;
  Bio: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  Birthday: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<Int>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  avatar: () => Promise<AsyncIterator<String>>;
  serviceB: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  fullName: String;
  email: String;
  password: String;
  age: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fullName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  age: () => Promise<Int>;
  phone: () => Promise<Int>;
  gender: () => Promise<Gender>;
  avatar: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fullName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  age: () => Promise<AsyncIterator<Int>>;
  phone: () => Promise<AsyncIterator<Int>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  avatar: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Appointment",
    embedded: false
  },
  {
    name: "AppointmentType",
    embedded: false
  },
  {
    name: "Gender",
    embedded: false
  },
  {
    name: "Service",
    embedded: false
  },
  {
    name: "ServiceA",
    embedded: false
  },
  {
    name: "ServiceB",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
